#######################
##   Create Person   ##
#######################
create table Person(
	Name char(20),
	ID char(9) not null,
	Address char(30),
	DOB date,
	Primary key (ID)
)

#######################
## Create Instructor ##
#######################
create table Instructor(
	InstructorID char(9) not null references Person(ID),
	Rank char(12),
	Salary int,
	Primary key (InstructorID)
)

#######################
##   Create Student  ##
#######################
create table Student(
	StudentID char(9) not null,
	Classification varchar(10),
	GPA double,
	MentorID char(9) references Instructor(InstructorID)
	CreditHours int,
	Primary key (StudentID)
)

#######################
##   Create Course   ##
#######################
create table Course(
	CourseCode char(6) not null,
	CourseName char(50),
	PreReq char(6)
)

#######################
##  Create Offering  ##
#######################
create table Offering(
	CourseCode char(6) not null,
	SectionNo int not null,
	InstructorID char(9) not null references Instructor(InstructorID),
	Primary key(CourseCode, SectionNo)
)

#######################
## Create Enrollment ##
#######################
create table Enrollment(
	CourseCode char(6) not null,
	SectionNo int not null,
	StudentID char(9) not null references Student,
	Grade char(4) not null,
	primary key( CourseCode, StudentID),
	foreign key( CourseCode, SectionNo) references Offering(CourseCode, SectionNo)
)

################################################
##################### PART B ###################
################################################

#######################
##    Load Person    ##
#######################
load xml local infile 'C:/[path to Person.xml]'
into table Person
rows identified by '<Person>';

#######################
##  Load Instructor  ##
#######################
load xml local infile 'C:/[path to Instructor.xml]'
into table Instructor
rows identified by '<Identified>';

#######################
##    Load Student   ##
#######################
load xml local infile 'C:/[path to Student.xml]'
into table Student
rows identified by '<Student>';

#######################
##     Load Course   ##
#######################
load xml local infile 'C:/[path to Course.xml']
into table Course
rows identified by '<Course>';

#######################
##   Load Offering   ##
#######################
load xml local infile 'C:/[path to Offering.xml']
into table Offering
rows identified by '<Offering>'

#######################
##  Load Enrollment  ##
#######################
load xml local infile 'C:/[path to Enrollment.xml']
into table Enrollment
rows identified by '<Enrollment>';

#######################
##      Item 13      ##
#######################
	select StudentID from Student where GPA > 3.8;

#######################
##      Item 14      ##
#######################
	select distinct CourseCode from Offering
	inner join Student on Student.MentorID = Offering.InstructorID
	where Student.Classification = 'Sophomore';

#######################
##      Item 15      ##
#######################
## Note: a) this query assumes we do not want the distinct teachers...there are duplicates
	select InstructorID, Salary from Instructor
	inner join Student on Student.MentorID = Instructor.InstructorID
	where Student.Classification = 'Freshman'
## Note: b) now to avoid duplicates we add 'distinct'
	select distinct InstructorID, Salary from Instructor
	inner join Student on Student.MentorID = Instructor.InstructorID
	where Student.Classification = 'Freshman'

#######################
##      Item 16      ##
#######################
	select sum(salary) as 'Total' from Instructor
	inner join Offering on Instructor.InstructorID != Offering.InstructorID

#######################
##      Item 17      ##
#######################
	select Name, DOB from Person
	where Year(DOB)='1976'
	
#######################
##      Item 18      ##
#######################	
	select distinct Instructor.Rank, Person.Name
	from Person
	inner join Instructor on Instructor.InstructorID = Person.ID
	inner join Offering on Instructor.InstructorID != Offering.InstructorID
	inner join Student on Student.MentorID != Offering.InstructorID

#######################
##      Item 19      ##
#######################	
## Note: since there was no DOB cutoff we just change the order of results
	select Name, DOB from Person
	inner join Student on Student.StudentID = Person.ID
	order by DOB desc
	
#######################
##      Item 20      ##
#######################
	select distinct ID, DOB, Name from Person
	inner join Student on Student.StudentID != Person.ID
	inner join Instructor on Instructor.InstructorID != Person.ID
	
#######################
##      Item 21      ##
#######################	
	select distinct Person.Name, count(Student.StudentID)
	from Person
	inner join Instructor on Person.ID = Instructor.InstructorID
	inner join Student on Person.ID = Student.MentorID
	group by Person.Name
	
#######################
##      Item 22      ##
#######################
	select count(StudentID), (sum(GPA)/count(StudentID)) as 'Average GPA' from Student
	group by Classification

#######################
##      Item 23      ##
#######################
	select CourseCode, count(StudentID) as 'enrollment' from Enrollment
	group by CourseCode order by count(StudentID) asc
	
#######################
##      Item 24      ##
#######################
	select distinct Student.StudentID, Student.MentorID from Student
	inner join Enrollment on Student.StudentID = Enrollment.StudentID
	inner join Offering on Student.MentorID = Offering.InstructorID
	
#######################
##      Item 25      ##
#######################
	select Student.StudentID, Person.Name, Student.CreditHours
	from Person
	inner join Student on Student.StudentID = Person.ID
	where Student.Classification = 'Freshman' and Year(Person.DOB)>='1976'
	
	
	
	
	
	
	

